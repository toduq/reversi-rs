<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="207055"><g><title>reversi-rs`reversi_rs::mobility::get_mobility (47 samples, 0.02%)</title><rect x="0.0087%" y="229" width="0.0227%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="47"/><text x="0.2587%" y="239.50"></text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 0.03%)</title><rect x="0.0063%" y="245" width="0.0295%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="61"/><text x="0.2563%" y="255.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (319 samples, 0.15%)</title><rect x="0.0536%" y="213" width="0.1541%" height="15" fill="rgb(221,193,54)" fg:x="111" fg:w="319"/><text x="0.3036%" y="223.50"></text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (364 samples, 0.18%)</title><rect x="0.0488%" y="229" width="0.1758%" height="15" fill="rgb(248,212,6)" fg:x="101" fg:w="364"/><text x="0.2988%" y="239.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (35 samples, 0.02%)</title><rect x="0.2077%" y="213" width="0.0169%" height="15" fill="rgb(208,68,35)" fg:x="430" fg:w="35"/><text x="0.4577%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (55 samples, 0.03%)</title><rect x="0.2270%" y="229" width="0.0266%" height="15" fill="rgb(232,128,0)" fg:x="470" fg:w="55"/><text x="0.4770%" y="239.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (45 samples, 0.02%)</title><rect x="0.2536%" y="229" width="0.0217%" height="15" fill="rgb(207,160,47)" fg:x="525" fg:w="45"/><text x="0.5036%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (29 samples, 0.01%)</title><rect x="0.3265%" y="133" width="0.0140%" height="15" fill="rgb(228,23,34)" fg:x="676" fg:w="29"/><text x="0.5765%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (33 samples, 0.02%)</title><rect x="0.3250%" y="149" width="0.0159%" height="15" fill="rgb(218,30,26)" fg:x="673" fg:w="33"/><text x="0.5750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (41 samples, 0.02%)</title><rect x="0.3236%" y="165" width="0.0198%" height="15" fill="rgb(220,122,19)" fg:x="670" fg:w="41"/><text x="0.5736%" y="175.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (52 samples, 0.03%)</title><rect x="0.3202%" y="197" width="0.0251%" height="15" fill="rgb(250,228,42)" fg:x="663" fg:w="52"/><text x="0.5702%" y="207.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (46 samples, 0.02%)</title><rect x="0.3231%" y="181" width="0.0222%" height="15" fill="rgb(240,193,28)" fg:x="669" fg:w="46"/><text x="0.5731%" y="191.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (2,452 samples, 1.18%)</title><rect x="0.3453%" y="197" width="1.1842%" height="15" fill="rgb(216,20,37)" fg:x="715" fg:w="2452"/><text x="0.5953%" y="207.50"></text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,814 samples, 1.36%)</title><rect x="0.3038%" y="213" width="1.3591%" height="15" fill="rgb(206,188,39)" fg:x="629" fg:w="2814"/><text x="0.5538%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (276 samples, 0.13%)</title><rect x="1.5295%" y="197" width="0.1333%" height="15" fill="rgb(217,207,13)" fg:x="3167" fg:w="276"/><text x="1.7795%" y="207.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (450 samples, 0.22%)</title><rect x="1.6701%" y="213" width="0.2173%" height="15" fill="rgb(231,73,38)" fg:x="3458" fg:w="450"/><text x="1.9201%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (222 samples, 0.11%)</title><rect x="1.8874%" y="213" width="0.1072%" height="15" fill="rgb(225,20,46)" fg:x="3908" fg:w="222"/><text x="2.1374%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.02%)</title><rect x="2.0198%" y="197" width="0.0217%" height="15" fill="rgb(210,31,41)" fg:x="4182" fg:w="45"/><text x="2.2698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.02%)</title><rect x="2.0236%" y="181" width="0.0179%" height="15" fill="rgb(221,200,47)" fg:x="4190" fg:w="37"/><text x="2.2736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.02%)</title><rect x="2.0241%" y="165" width="0.0174%" height="15" fill="rgb(226,26,5)" fg:x="4191" fg:w="36"/><text x="2.2741%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.01%)</title><rect x="2.0569%" y="181" width="0.0121%" height="15" fill="rgb(249,33,26)" fg:x="4259" fg:w="25"/><text x="2.3069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.01%)</title><rect x="2.0579%" y="165" width="0.0111%" height="15" fill="rgb(235,183,28)" fg:x="4261" fg:w="23"/><text x="2.3079%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.02%)</title><rect x="2.0458%" y="197" width="0.0237%" height="15" fill="rgb(221,5,38)" fg:x="4236" fg:w="49"/><text x="2.2958%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (73 samples, 0.04%)</title><rect x="2.0695%" y="197" width="0.0353%" height="15" fill="rgb(247,18,42)" fg:x="4285" fg:w="73"/><text x="2.3195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 0.02%)</title><rect x="2.0801%" y="181" width="0.0246%" height="15" fill="rgb(241,131,45)" fg:x="4307" fg:w="51"/><text x="2.3301%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.01%)</title><rect x="2.1714%" y="181" width="0.0145%" height="15" fill="rgb(249,31,29)" fg:x="4496" fg:w="30"/><text x="2.4214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.01%)</title><rect x="2.1748%" y="165" width="0.0111%" height="15" fill="rgb(225,111,53)" fg:x="4503" fg:w="23"/><text x="2.4248%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.01%)</title><rect x="2.1758%" y="149" width="0.0101%" height="15" fill="rgb(238,160,17)" fg:x="4505" fg:w="21"/><text x="2.4258%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.01%)</title><rect x="2.2337%" y="101" width="0.0145%" height="15" fill="rgb(214,148,48)" fg:x="4625" fg:w="30"/><text x="2.4837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 0.01%)</title><rect x="2.2347%" y="85" width="0.0135%" height="15" fill="rgb(232,36,49)" fg:x="4627" fg:w="28"/><text x="2.4847%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (62 samples, 0.03%)</title><rect x="2.2583%" y="101" width="0.0299%" height="15" fill="rgb(209,103,24)" fg:x="4676" fg:w="62"/><text x="2.5083%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (160 samples, 0.08%)</title><rect x="2.2158%" y="117" width="0.0773%" height="15" fill="rgb(229,88,8)" fg:x="4588" fg:w="160"/><text x="2.4658%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (169 samples, 0.08%)</title><rect x="2.2120%" y="133" width="0.0816%" height="15" fill="rgb(213,181,19)" fg:x="4580" fg:w="169"/><text x="2.4620%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.02%)</title><rect x="2.2946%" y="133" width="0.0164%" height="15" fill="rgb(254,191,54)" fg:x="4751" fg:w="34"/><text x="2.5446%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.02%)</title><rect x="2.2955%" y="117" width="0.0155%" height="15" fill="rgb(241,83,37)" fg:x="4753" fg:w="32"/><text x="2.5455%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (225 samples, 0.11%)</title><rect x="2.2028%" y="149" width="0.1087%" height="15" fill="rgb(233,36,39)" fg:x="4561" fg:w="225"/><text x="2.4528%" y="159.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (269 samples, 0.13%)</title><rect x="2.1859%" y="181" width="0.1299%" height="15" fill="rgb(226,3,54)" fg:x="4526" fg:w="269"/><text x="2.4359%" y="191.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (239 samples, 0.12%)</title><rect x="2.2004%" y="165" width="0.1154%" height="15" fill="rgb(245,192,40)" fg:x="4556" fg:w="239"/><text x="2.4504%" y="175.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (13,760 samples, 6.65%)</title><rect x="2.3173%" y="181" width="6.6456%" height="15" fill="rgb(238,167,29)" fg:x="4798" fg:w="13760"/><text x="2.5673%" y="191.50">reversi-r..</text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15,599 samples, 7.53%)</title><rect x="2.1134%" y="197" width="7.5337%" height="15" fill="rgb(232,182,51)" fg:x="4376" fg:w="15599"/><text x="2.3634%" y="207.50">reversi-rs..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,417 samples, 0.68%)</title><rect x="8.9628%" y="181" width="0.6844%" height="15" fill="rgb(231,60,39)" fg:x="18558" fg:w="1417"/><text x="9.2128%" y="191.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (51 samples, 0.02%)</title><rect x="9.6515%" y="197" width="0.0246%" height="15" fill="rgb(208,69,12)" fg:x="19984" fg:w="51"/><text x="9.9015%" y="207.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (3,315 samples, 1.60%)</title><rect x="9.6762%" y="197" width="1.6010%" height="15" fill="rgb(235,93,37)" fg:x="20035" fg:w="3315"/><text x="9.9262%" y="207.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (960 samples, 0.46%)</title><rect x="11.2772%" y="197" width="0.4636%" height="15" fill="rgb(213,116,39)" fg:x="23350" fg:w="960"/><text x="11.5272%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (114 samples, 0.06%)</title><rect x="11.8321%" y="165" width="0.0551%" height="15" fill="rgb(222,207,29)" fg:x="24499" fg:w="114"/><text x="12.0821%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (112 samples, 0.05%)</title><rect x="11.8331%" y="149" width="0.0541%" height="15" fill="rgb(206,96,30)" fg:x="24501" fg:w="112"/><text x="12.0831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.02%)</title><rect x="11.8640%" y="133" width="0.0232%" height="15" fill="rgb(218,138,4)" fg:x="24565" fg:w="48"/><text x="12.1140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (136 samples, 0.07%)</title><rect x="11.8220%" y="181" width="0.0657%" height="15" fill="rgb(250,191,14)" fg:x="24478" fg:w="136"/><text x="12.0720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.02%)</title><rect x="11.9162%" y="165" width="0.0198%" height="15" fill="rgb(239,60,40)" fg:x="24673" fg:w="41"/><text x="12.1662%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (40 samples, 0.02%)</title><rect x="11.9166%" y="149" width="0.0193%" height="15" fill="rgb(206,27,48)" fg:x="24674" fg:w="40"/><text x="12.1666%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (91 samples, 0.04%)</title><rect x="11.8930%" y="181" width="0.0439%" height="15" fill="rgb(225,35,8)" fg:x="24625" fg:w="91"/><text x="12.1430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.02%)</title><rect x="11.9963%" y="149" width="0.0193%" height="15" fill="rgb(250,213,24)" fg:x="24839" fg:w="40"/><text x="12.2463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (181 samples, 0.09%)</title><rect x="11.9369%" y="181" width="0.0874%" height="15" fill="rgb(247,123,22)" fg:x="24716" fg:w="181"/><text x="12.1869%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (124 samples, 0.06%)</title><rect x="11.9645%" y="165" width="0.0599%" height="15" fill="rgb(231,138,38)" fg:x="24773" fg:w="124"/><text x="12.2145%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 0.03%)</title><rect x="12.1890%" y="165" width="0.0299%" height="15" fill="rgb(231,145,46)" fg:x="25238" fg:w="62"/><text x="12.4390%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (52 samples, 0.03%)</title><rect x="12.1939%" y="149" width="0.0251%" height="15" fill="rgb(251,118,11)" fg:x="25248" fg:w="52"/><text x="12.4439%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (48 samples, 0.02%)</title><rect x="12.1958%" y="133" width="0.0232%" height="15" fill="rgb(217,147,25)" fg:x="25252" fg:w="48"/><text x="12.4458%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (53 samples, 0.03%)</title><rect x="12.3035%" y="85" width="0.0256%" height="15" fill="rgb(247,81,37)" fg:x="25475" fg:w="53"/><text x="12.5535%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.01%)</title><rect x="12.3141%" y="69" width="0.0150%" height="15" fill="rgb(209,12,38)" fg:x="25497" fg:w="31"/><text x="12.5641%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (63 samples, 0.03%)</title><rect x="12.3373%" y="85" width="0.0304%" height="15" fill="rgb(227,1,9)" fg:x="25545" fg:w="63"/><text x="12.5873%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (60 samples, 0.03%)</title><rect x="12.3388%" y="69" width="0.0290%" height="15" fill="rgb(248,47,43)" fg:x="25548" fg:w="60"/><text x="12.5888%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.01%)</title><rect x="12.3571%" y="53" width="0.0106%" height="15" fill="rgb(221,10,30)" fg:x="25586" fg:w="22"/><text x="12.6071%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 0.02%)</title><rect x="12.3677%" y="85" width="0.0208%" height="15" fill="rgb(210,229,1)" fg:x="25608" fg:w="43"/><text x="12.6177%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.02%)</title><rect x="12.3716%" y="69" width="0.0169%" height="15" fill="rgb(222,148,37)" fg:x="25616" fg:w="35"/><text x="12.6216%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.02%)</title><rect x="12.4489%" y="69" width="0.0193%" height="15" fill="rgb(234,67,33)" fg:x="25776" fg:w="40"/><text x="12.6989%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (178 samples, 0.09%)</title><rect x="12.3924%" y="85" width="0.0860%" height="15" fill="rgb(247,98,35)" fg:x="25659" fg:w="178"/><text x="12.6424%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.01%)</title><rect x="12.4682%" y="69" width="0.0101%" height="15" fill="rgb(247,138,52)" fg:x="25816" fg:w="21"/><text x="12.7182%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (420 samples, 0.20%)</title><rect x="12.2919%" y="101" width="0.2028%" height="15" fill="rgb(213,79,30)" fg:x="25451" fg:w="420"/><text x="12.5419%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.02%)</title><rect x="12.4783%" y="85" width="0.0164%" height="15" fill="rgb(246,177,23)" fg:x="25837" fg:w="34"/><text x="12.7283%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (459 samples, 0.22%)</title><rect x="12.2779%" y="117" width="0.2217%" height="15" fill="rgb(230,62,27)" fg:x="25422" fg:w="459"/><text x="12.5279%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (69 samples, 0.03%)</title><rect x="12.5015%" y="117" width="0.0333%" height="15" fill="rgb(216,154,8)" fg:x="25885" fg:w="69"/><text x="12.7515%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.03%)</title><rect x="12.5068%" y="101" width="0.0280%" height="15" fill="rgb(244,35,45)" fg:x="25896" fg:w="58"/><text x="12.7568%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (591 samples, 0.29%)</title><rect x="12.2499%" y="133" width="0.2854%" height="15" fill="rgb(251,115,12)" fg:x="25364" fg:w="591"/><text x="12.4999%" y="143.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (668 samples, 0.32%)</title><rect x="12.2209%" y="165" width="0.3226%" height="15" fill="rgb(240,54,50)" fg:x="25304" fg:w="668"/><text x="12.4709%" y="175.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (623 samples, 0.30%)</title><rect x="12.2426%" y="149" width="0.3009%" height="15" fill="rgb(233,84,52)" fg:x="25349" fg:w="623"/><text x="12.4926%" y="159.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (30,274 samples, 14.62%)</title><rect x="12.5459%" y="165" width="14.6212%" height="15" fill="rgb(207,117,47)" fg:x="25977" fg:w="30274"/><text x="12.7959%" y="175.50">reversi-rs`reversi_rs:..</text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34,488 samples, 16.66%)</title><rect x="12.0383%" y="181" width="16.6564%" height="15" fill="rgb(249,43,39)" fg:x="24926" fg:w="34488"/><text x="12.2883%" y="191.50">reversi-rs`&lt;alloc::vec::Ve..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (3,163 samples, 1.53%)</title><rect x="27.1672%" y="165" width="1.5276%" height="15" fill="rgb(209,38,44)" fg:x="56251" fg:w="3163"/><text x="27.4172%" y="175.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (163 samples, 0.08%)</title><rect x="28.7035%" y="181" width="0.0787%" height="15" fill="rgb(236,212,23)" fg:x="59432" fg:w="163"/><text x="28.9535%" y="191.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (23,350 samples, 11.28%)</title><rect x="28.7822%" y="181" width="11.2772%" height="15" fill="rgb(242,79,21)" fg:x="59595" fg:w="23350"/><text x="29.0322%" y="191.50">reversi-rs`revers..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (2,082 samples, 1.01%)</title><rect x="40.0594%" y="181" width="1.0055%" height="15" fill="rgb(211,96,35)" fg:x="82945" fg:w="2082"/><text x="40.3094%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (74 samples, 0.04%)</title><rect x="41.1852%" y="149" width="0.0357%" height="15" fill="rgb(253,215,40)" fg:x="85276" fg:w="74"/><text x="41.4352%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (72 samples, 0.03%)</title><rect x="41.1862%" y="133" width="0.0348%" height="15" fill="rgb(211,81,21)" fg:x="85278" fg:w="72"/><text x="41.4362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.02%)</title><rect x="41.2040%" y="117" width="0.0169%" height="15" fill="rgb(208,190,38)" fg:x="85315" fg:w="35"/><text x="41.4540%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 0.04%)</title><rect x="41.1808%" y="165" width="0.0406%" height="15" fill="rgb(235,213,38)" fg:x="85267" fg:w="84"/><text x="41.4308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.03%)</title><rect x="41.2238%" y="165" width="0.0285%" height="15" fill="rgb(237,122,38)" fg:x="85356" fg:w="59"/><text x="41.4738%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.01%)</title><rect x="41.2388%" y="149" width="0.0135%" height="15" fill="rgb(244,218,35)" fg:x="85387" fg:w="28"/><text x="41.4888%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.01%)</title><rect x="41.2403%" y="133" width="0.0121%" height="15" fill="rgb(240,68,47)" fg:x="85390" fg:w="25"/><text x="41.4903%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.01%)</title><rect x="41.2934%" y="133" width="0.0135%" height="15" fill="rgb(210,16,53)" fg:x="85500" fg:w="28"/><text x="41.5434%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (121 samples, 0.06%)</title><rect x="41.2523%" y="165" width="0.0584%" height="15" fill="rgb(235,124,12)" fg:x="85415" fg:w="121"/><text x="41.5023%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.04%)</title><rect x="41.2755%" y="149" width="0.0353%" height="15" fill="rgb(224,169,11)" fg:x="85463" fg:w="73"/><text x="41.5255%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.02%)</title><rect x="41.4103%" y="149" width="0.0241%" height="15" fill="rgb(250,166,2)" fg:x="85742" fg:w="50"/><text x="41.6603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.02%)</title><rect x="41.4146%" y="133" width="0.0198%" height="15" fill="rgb(242,216,29)" fg:x="85751" fg:w="41"/><text x="41.6646%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.02%)</title><rect x="41.4165%" y="117" width="0.0179%" height="15" fill="rgb(230,116,27)" fg:x="85755" fg:w="37"/><text x="41.6665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.01%)</title><rect x="41.4416%" y="133" width="0.0106%" height="15" fill="rgb(228,99,48)" fg:x="85807" fg:w="22"/><text x="41.6916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (38 samples, 0.02%)</title><rect x="41.4870%" y="69" width="0.0184%" height="15" fill="rgb(253,11,6)" fg:x="85901" fg:w="38"/><text x="41.7370%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.02%)</title><rect x="41.5097%" y="69" width="0.0198%" height="15" fill="rgb(247,143,39)" fg:x="85948" fg:w="41"/><text x="41.7597%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.02%)</title><rect x="41.5112%" y="53" width="0.0184%" height="15" fill="rgb(236,97,10)" fg:x="85951" fg:w="38"/><text x="41.7612%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.01%)</title><rect x="41.5295%" y="69" width="0.0140%" height="15" fill="rgb(233,208,19)" fg:x="85989" fg:w="29"/><text x="41.7795%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.01%)</title><rect x="41.5315%" y="53" width="0.0121%" height="15" fill="rgb(216,164,2)" fg:x="85993" fg:w="25"/><text x="41.7815%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (102 samples, 0.05%)</title><rect x="41.5440%" y="69" width="0.0493%" height="15" fill="rgb(220,129,5)" fg:x="86019" fg:w="102"/><text x="41.7940%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (245 samples, 0.12%)</title><rect x="41.4812%" y="85" width="0.1183%" height="15" fill="rgb(242,17,10)" fg:x="85889" fg:w="245"/><text x="41.7312%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (271 samples, 0.13%)</title><rect x="41.4706%" y="101" width="0.1309%" height="15" fill="rgb(242,107,0)" fg:x="85867" fg:w="271"/><text x="41.7206%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.02%)</title><rect x="41.6025%" y="101" width="0.0155%" height="15" fill="rgb(251,28,31)" fg:x="86140" fg:w="32"/><text x="41.8525%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.02%)</title><rect x="41.6025%" y="85" width="0.0155%" height="15" fill="rgb(233,223,10)" fg:x="86140" fg:w="32"/><text x="41.8525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (334 samples, 0.16%)</title><rect x="41.4571%" y="117" width="0.1613%" height="15" fill="rgb(215,21,27)" fg:x="85839" fg:w="334"/><text x="41.7071%" y="127.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (393 samples, 0.19%)</title><rect x="41.4359%" y="149" width="0.1898%" height="15" fill="rgb(232,23,21)" fg:x="85795" fg:w="393"/><text x="41.6859%" y="159.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (355 samples, 0.17%)</title><rect x="41.4542%" y="133" width="0.1715%" height="15" fill="rgb(244,5,23)" fg:x="85833" fg:w="355"/><text x="41.7042%" y="143.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (15,728 samples, 7.60%)</title><rect x="41.6286%" y="149" width="7.5960%" height="15" fill="rgb(226,81,46)" fg:x="86194" fg:w="15728"/><text x="41.8786%" y="159.50">reversi-rs..</text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18,115 samples, 8.75%)</title><rect x="41.3214%" y="165" width="8.7489%" height="15" fill="rgb(247,70,30)" fg:x="85558" fg:w="18115"/><text x="41.5714%" y="175.50">reversi-rs`&lt;..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,751 samples, 0.85%)</title><rect x="49.2246%" y="149" width="0.8457%" height="15" fill="rgb(212,68,19)" fg:x="101922" fg:w="1751"/><text x="49.4746%" y="159.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (70 samples, 0.03%)</title><rect x="50.0794%" y="165" width="0.0338%" height="15" fill="rgb(240,187,13)" fg:x="103692" fg:w="70"/><text x="50.3294%" y="175.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (54,787 samples, 26.46%)</title><rect x="50.1133%" y="165" width="26.4601%" height="15" fill="rgb(223,113,26)" fg:x="103762" fg:w="54787"/><text x="50.3633%" y="175.50">reversi-rs`reversi_rs::mobility::get_mobil..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,072 samples, 0.52%)</title><rect x="76.5734%" y="165" width="0.5177%" height="15" fill="rgb(206,192,2)" fg:x="158549" fg:w="1072"/><text x="76.8234%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.03%)</title><rect x="77.1553%" y="149" width="0.0343%" height="15" fill="rgb(241,108,4)" fg:x="159754" fg:w="71"/><text x="77.4053%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (61 samples, 0.03%)</title><rect x="77.1602%" y="133" width="0.0295%" height="15" fill="rgb(247,173,49)" fg:x="159764" fg:w="61"/><text x="77.4102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (60 samples, 0.03%)</title><rect x="77.1607%" y="117" width="0.0290%" height="15" fill="rgb(224,114,35)" fg:x="159765" fg:w="60"/><text x="77.4107%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.02%)</title><rect x="77.1727%" y="101" width="0.0169%" height="15" fill="rgb(245,159,27)" fg:x="159790" fg:w="35"/><text x="77.4227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (33 samples, 0.02%)</title><rect x="77.2041%" y="133" width="0.0159%" height="15" fill="rgb(245,172,44)" fg:x="159855" fg:w="33"/><text x="77.4541%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.01%)</title><rect x="77.2085%" y="117" width="0.0116%" height="15" fill="rgb(236,23,11)" fg:x="159864" fg:w="24"/><text x="77.4585%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.03%)</title><rect x="77.1916%" y="149" width="0.0299%" height="15" fill="rgb(205,117,38)" fg:x="159829" fg:w="62"/><text x="77.4416%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.01%)</title><rect x="77.2534%" y="117" width="0.0111%" height="15" fill="rgb(237,72,25)" fg:x="159957" fg:w="23"/><text x="77.5034%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (95 samples, 0.05%)</title><rect x="77.2215%" y="149" width="0.0459%" height="15" fill="rgb(244,70,9)" fg:x="159891" fg:w="95"/><text x="77.4715%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (66 samples, 0.03%)</title><rect x="77.2355%" y="133" width="0.0319%" height="15" fill="rgb(217,125,39)" fg:x="159920" fg:w="66"/><text x="77.4855%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.02%)</title><rect x="77.3336%" y="133" width="0.0227%" height="15" fill="rgb(235,36,10)" fg:x="160123" fg:w="47"/><text x="77.5836%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.02%)</title><rect x="77.3384%" y="117" width="0.0179%" height="15" fill="rgb(251,123,47)" fg:x="160133" fg:w="37"/><text x="77.5884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.02%)</title><rect x="77.3408%" y="101" width="0.0155%" height="15" fill="rgb(221,13,13)" fg:x="160138" fg:w="32"/><text x="77.5908%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.02%)</title><rect x="77.4036%" y="53" width="0.0184%" height="15" fill="rgb(238,131,9)" fg:x="160268" fg:w="38"/><text x="77.6536%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.02%)</title><rect x="77.4050%" y="37" width="0.0169%" height="15" fill="rgb(211,50,8)" fg:x="160271" fg:w="35"/><text x="77.6550%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (79 samples, 0.04%)</title><rect x="77.4292%" y="53" width="0.0382%" height="15" fill="rgb(245,182,24)" fg:x="160321" fg:w="79"/><text x="77.6792%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (171 samples, 0.08%)</title><rect x="77.3896%" y="69" width="0.0826%" height="15" fill="rgb(242,14,37)" fg:x="160239" fg:w="171"/><text x="77.6396%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (186 samples, 0.09%)</title><rect x="77.3833%" y="85" width="0.0898%" height="15" fill="rgb(246,228,12)" fg:x="160226" fg:w="186"/><text x="77.6333%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.01%)</title><rect x="77.4731%" y="85" width="0.0135%" height="15" fill="rgb(213,55,15)" fg:x="160412" fg:w="28"/><text x="77.7231%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.01%)</title><rect x="77.4751%" y="69" width="0.0116%" height="15" fill="rgb(209,9,3)" fg:x="160416" fg:w="24"/><text x="77.7251%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (232 samples, 0.11%)</title><rect x="77.3751%" y="101" width="0.1120%" height="15" fill="rgb(230,59,30)" fg:x="160209" fg:w="232"/><text x="77.6251%" y="111.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (271 samples, 0.13%)</title><rect x="77.3601%" y="133" width="0.1309%" height="15" fill="rgb(209,121,21)" fg:x="160178" fg:w="271"/><text x="77.6101%" y="143.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (246 samples, 0.12%)</title><rect x="77.3722%" y="117" width="0.1188%" height="15" fill="rgb(220,109,13)" fg:x="160203" fg:w="246"/><text x="77.6222%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (9,121 samples, 4.41%)</title><rect x="77.4925%" y="133" width="4.4051%" height="15" fill="rgb(232,18,1)" fg:x="160452" fg:w="9121"/><text x="77.7425%" y="143.50">rever..</text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,588 samples, 5.11%)</title><rect x="77.2756%" y="149" width="5.1136%" height="15" fill="rgb(215,41,42)" fg:x="160003" fg:w="10588"/><text x="77.5256%" y="159.50">revers..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,018 samples, 0.49%)</title><rect x="81.8976%" y="133" width="0.4917%" height="15" fill="rgb(224,123,36)" fg:x="169573" fg:w="1018"/><text x="82.1476%" y="143.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (39 samples, 0.02%)</title><rect x="82.3955%" y="149" width="0.0188%" height="15" fill="rgb(240,125,3)" fg:x="170604" fg:w="39"/><text x="82.6455%" y="159.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (17,978 samples, 8.68%)</title><rect x="82.4143%" y="149" width="8.6827%" height="15" fill="rgb(205,98,50)" fg:x="170643" fg:w="17978"/><text x="82.6643%" y="159.50">reversi-rs`r..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (653 samples, 0.32%)</title><rect x="91.0971%" y="149" width="0.3154%" height="15" fill="rgb(205,185,37)" fg:x="188621" fg:w="653"/><text x="91.3471%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.01%)</title><rect x="91.4472%" y="133" width="0.0140%" height="15" fill="rgb(238,207,15)" fg:x="189346" fg:w="29"/><text x="91.6972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.01%)</title><rect x="91.4482%" y="117" width="0.0130%" height="15" fill="rgb(213,199,42)" fg:x="189348" fg:w="27"/><text x="91.6982%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.01%)</title><rect x="91.4491%" y="101" width="0.0121%" height="15" fill="rgb(235,201,11)" fg:x="189350" fg:w="25"/><text x="91.6991%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (38 samples, 0.02%)</title><rect x="91.4713%" y="133" width="0.0184%" height="15" fill="rgb(207,46,11)" fg:x="189396" fg:w="38"/><text x="91.7213%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.01%)</title><rect x="91.4786%" y="117" width="0.0111%" height="15" fill="rgb(241,35,35)" fg:x="189411" fg:w="23"/><text x="91.7286%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.01%)</title><rect x="91.5114%" y="117" width="0.0116%" height="15" fill="rgb(243,32,47)" fg:x="189479" fg:w="24"/><text x="91.7614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.01%)</title><rect x="91.5129%" y="101" width="0.0101%" height="15" fill="rgb(247,202,23)" fg:x="189482" fg:w="21"/><text x="91.7629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.01%)</title><rect x="91.5288%" y="53" width="0.0111%" height="15" fill="rgb(219,102,11)" fg:x="189515" fg:w="23"/><text x="91.7788%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.01%)</title><rect x="91.5279%" y="69" width="0.0126%" height="15" fill="rgb(243,110,44)" fg:x="189513" fg:w="26"/><text x="91.7779%" y="79.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.02%)</title><rect x="91.5235%" y="117" width="0.0198%" height="15" fill="rgb(222,74,54)" fg:x="189504" fg:w="41"/><text x="91.7735%" y="127.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (37 samples, 0.02%)</title><rect x="91.5254%" y="101" width="0.0179%" height="15" fill="rgb(216,99,12)" fg:x="189508" fg:w="37"/><text x="91.7754%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 0.02%)</title><rect x="91.5254%" y="85" width="0.0179%" height="15" fill="rgb(226,22,26)" fg:x="189508" fg:w="37"/><text x="91.7754%" y="95.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (2,459 samples, 1.19%)</title><rect x="91.5438%" y="117" width="1.1876%" height="15" fill="rgb(217,163,10)" fg:x="189546" fg:w="2459"/><text x="91.7938%" y="127.50"></text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,792 samples, 1.35%)</title><rect x="91.4931%" y="133" width="1.3484%" height="15" fill="rgb(213,25,53)" fg:x="189441" fg:w="2792"/><text x="91.7431%" y="143.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (228 samples, 0.11%)</title><rect x="92.7314%" y="117" width="0.1101%" height="15" fill="rgb(252,105,26)" fg:x="192005" fg:w="228"/><text x="92.9814%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (12,344 samples, 5.96%)</title><rect x="92.8463%" y="133" width="5.9617%" height="15" fill="rgb(220,39,43)" fg:x="192243" fg:w="12344"/><text x="93.0963%" y="143.50">reversi-..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (132 samples, 0.06%)</title><rect x="98.8080%" y="133" width="0.0638%" height="15" fill="rgb(229,68,48)" fg:x="204587" fg:w="132"/><text x="99.0580%" y="143.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (259 samples, 0.13%)</title><rect x="98.8959%" y="101" width="0.1251%" height="15" fill="rgb(252,8,32)" fg:x="204769" fg:w="259"/><text x="99.1459%" y="111.50"></text></g><g><title>reversi-rs`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (304 samples, 0.15%)</title><rect x="98.8887%" y="117" width="0.1468%" height="15" fill="rgb(223,20,43)" fg:x="204754" fg:w="304"/><text x="99.1387%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (30 samples, 0.01%)</title><rect x="99.0210%" y="101" width="0.0145%" height="15" fill="rgb(229,81,49)" fg:x="205028" fg:w="30"/><text x="99.2710%" y="111.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (1,768 samples, 0.85%)</title><rect x="99.0355%" y="117" width="0.8539%" height="15" fill="rgb(236,28,36)" fg:x="205058" fg:w="1768"/><text x="99.2855%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::search::rec_search (207,047 samples, 100.00%)</title><rect x="0.0005%" y="277" width="99.9961%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="207047"/><text x="0.2505%" y="287.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (207,039 samples, 99.99%)</title><rect x="0.0043%" y="261" width="99.9923%" height="15" fill="rgb(249,174,33)" fg:x="9" fg:w="207039"/><text x="0.2543%" y="271.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (206,960 samples, 99.95%)</title><rect x="0.0425%" y="245" width="99.9541%" height="15" fill="rgb(233,201,37)" fg:x="88" fg:w="206960"/><text x="0.2925%" y="255.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (206,478 samples, 99.72%)</title><rect x="0.2753%" y="229" width="99.7213%" height="15" fill="rgb(221,78,26)" fg:x="570" fg:w="206478"/><text x="0.5253%" y="239.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (202,918 samples, 98.00%)</title><rect x="1.9946%" y="213" width="98.0020%" height="15" fill="rgb(250,127,30)" fg:x="4130" fg:w="202918"/><text x="2.2446%" y="223.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (182,738 samples, 88.26%)</title><rect x="11.7408%" y="197" width="88.2558%" height="15" fill="rgb(230,49,44)" fg:x="24310" fg:w="182738"/><text x="11.9908%" y="207.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (122,021 samples, 58.93%)</title><rect x="41.0649%" y="181" width="58.9317%" height="15" fill="rgb(229,67,23)" fg:x="85027" fg:w="122021"/><text x="41.3149%" y="191.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (47,427 samples, 22.91%)</title><rect x="77.0911%" y="165" width="22.9055%" height="15" fill="rgb(249,83,47)" fg:x="159621" fg:w="47427"/><text x="77.3411%" y="175.50">reversi-rs`reversi_rs::search::rec_s..</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (17,774 samples, 8.58%)</title><rect x="91.4124%" y="149" width="8.5842%" height="15" fill="rgb(215,43,3)" fg:x="189274" fg:w="17774"/><text x="91.6624%" y="159.50">reversi-rs`r..</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (2,329 samples, 1.12%)</title><rect x="98.8718%" y="133" width="1.1248%" height="15" fill="rgb(238,154,13)" fg:x="204719" fg:w="2329"/><text x="99.1218%" y="143.50"></text></g><g><title>reversi-rs`reversi_rs::search::rec_search (204 samples, 0.10%)</title><rect x="99.8981%" y="117" width="0.0985%" height="15" fill="rgb(219,56,2)" fg:x="206844" fg:w="204"/><text x="100.1481%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (203 samples, 0.10%)</title><rect x="99.8986%" y="101" width="0.0980%" height="15" fill="rgb(233,0,4)" fg:x="206845" fg:w="203"/><text x="100.1486%" y="111.50"></text></g><g><title>all (207,055 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="207055"/><text x="0.2500%" y="431.50"></text></g><g><title>0x1 (207,055 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="207055"/><text x="0.2500%" y="415.50">0x1</text></g><g><title>libdyld.dylib`start (207,055 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="207055"/><text x="0.2500%" y="399.50">libdyld.dylib`start</text></g><g><title>reversi-rs`main (207,055 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="207055"/><text x="0.2500%" y="383.50">reversi-rs`main</text></g><g><title>reversi-rs`std::rt::lang_start_internal (207,055 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="207055"/><text x="0.2500%" y="367.50">reversi-rs`std::rt::lang_start_internal</text></g><g><title>reversi-rs`std::rt::lang_start::_{{closure}} (207,054 samples, 100.00%)</title><rect x="0.0005%" y="341" width="99.9995%" height="15" fill="rgb(221,155,16)" fg:x="1" fg:w="207054"/><text x="0.2505%" y="351.50">reversi-rs`std::rt::lang_start::_{{closure}}</text></g><g><title>reversi-rs`std::sys_common::backtrace::__rust_begin_short_backtrace (207,054 samples, 100.00%)</title><rect x="0.0005%" y="325" width="99.9995%" height="15" fill="rgb(215,215,53)" fg:x="1" fg:w="207054"/><text x="0.2505%" y="335.50">reversi-rs`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>reversi-rs`reversi_rs::main (207,054 samples, 100.00%)</title><rect x="0.0005%" y="309" width="99.9995%" height="15" fill="rgb(223,4,10)" fg:x="1" fg:w="207054"/><text x="0.2505%" y="319.50">reversi-rs`reversi_rs::main</text></g><g><title>reversi-rs`reversi_rs::search::find_best_move (207,054 samples, 100.00%)</title><rect x="0.0005%" y="293" width="99.9995%" height="15" fill="rgb(234,103,6)" fg:x="1" fg:w="207054"/><text x="0.2505%" y="303.50">reversi-rs`reversi_rs::search::find_best_move</text></g></svg></svg>