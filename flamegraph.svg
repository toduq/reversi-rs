<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="581.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="28407"><g><title>reversi-rs`alloc::slice::merge_sort (7 samples, 0.02%)</title><rect x="0.0422%" y="325" width="0.0246%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="7"/><text x="0.2922%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.01%)</title><rect x="0.0528%" y="309" width="0.0141%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="4"/><text x="0.3028%" y="319.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (4 samples, 0.01%)</title><rect x="0.0669%" y="325" width="0.0141%" height="15" fill="rgb(221,193,54)" fg:x="19" fg:w="4"/><text x="0.3169%" y="335.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (4 samples, 0.01%)</title><rect x="0.0810%" y="325" width="0.0141%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="4"/><text x="0.3310%" y="335.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (10 samples, 0.04%)</title><rect x="0.1232%" y="309" width="0.0352%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="10"/><text x="0.3732%" y="319.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="0.1443%" y="293" width="0.0141%" height="15" fill="rgb(232,128,0)" fg:x="41" fg:w="4"/><text x="0.3943%" y="303.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="0.1479%" y="277" width="0.0106%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="3"/><text x="0.3979%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.1479%" y="261" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="42" fg:w="3"/><text x="0.3979%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.1479%" y="245" width="0.0106%" height="15" fill="rgb(218,30,26)" fg:x="42" fg:w="3"/><text x="0.3979%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.1479%" y="229" width="0.0106%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="3"/><text x="0.3979%" y="239.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (6 samples, 0.02%)</title><rect x="0.1584%" y="309" width="0.0211%" height="15" fill="rgb(250,228,42)" fg:x="45" fg:w="6"/><text x="0.4084%" y="319.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (14 samples, 0.05%)</title><rect x="0.1795%" y="309" width="0.0493%" height="15" fill="rgb(240,193,28)" fg:x="51" fg:w="14"/><text x="0.4295%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.3098%" y="277" width="0.0106%" height="15" fill="rgb(216,20,37)" fg:x="88" fg:w="3"/><text x="0.5598%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.3098%" y="261" width="0.0106%" height="15" fill="rgb(206,188,39)" fg:x="88" fg:w="3"/><text x="0.5598%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.3098%" y="245" width="0.0106%" height="15" fill="rgb(217,207,13)" fg:x="88" fg:w="3"/><text x="0.5598%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.03%)</title><rect x="0.3239%" y="277" width="0.0317%" height="15" fill="rgb(231,73,38)" fg:x="92" fg:w="9"/><text x="0.5739%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="0.3379%" y="261" width="0.0176%" height="15" fill="rgb(225,20,46)" fg:x="96" fg:w="5"/><text x="0.5879%" y="271.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (24 samples, 0.08%)</title><rect x="0.2816%" y="293" width="0.0845%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="24"/><text x="0.5316%" y="303.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="0.3555%" y="277" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="101" fg:w="3"/><text x="0.6055%" y="287.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="0.3555%" y="261" width="0.0106%" height="15" fill="rgb(226,26,5)" fg:x="101" fg:w="3"/><text x="0.6055%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.3555%" y="245" width="0.0106%" height="15" fill="rgb(249,33,26)" fg:x="101" fg:w="3"/><text x="0.6055%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.3555%" y="229" width="0.0106%" height="15" fill="rgb(235,183,28)" fg:x="101" fg:w="3"/><text x="0.6055%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.3555%" y="213" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="101" fg:w="3"/><text x="0.6055%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (22 samples, 0.08%)</title><rect x="0.3661%" y="293" width="0.0774%" height="15" fill="rgb(247,18,42)" fg:x="104" fg:w="22"/><text x="0.6161%" y="303.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (32 samples, 0.11%)</title><rect x="0.4436%" y="293" width="0.1126%" height="15" fill="rgb(241,131,45)" fg:x="126" fg:w="32"/><text x="0.6936%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="0.6900%" y="261" width="0.0246%" height="15" fill="rgb(249,31,29)" fg:x="196" fg:w="7"/><text x="0.9400%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="0.6900%" y="245" width="0.0246%" height="15" fill="rgb(225,111,53)" fg:x="196" fg:w="7"/><text x="0.9400%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="0.6970%" y="229" width="0.0176%" height="15" fill="rgb(238,160,17)" fg:x="198" fg:w="5"/><text x="0.9470%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="0.7146%" y="261" width="0.0106%" height="15" fill="rgb(214,148,48)" fg:x="203" fg:w="3"/><text x="0.9646%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.06%)</title><rect x="0.7252%" y="261" width="0.0634%" height="15" fill="rgb(232,36,49)" fg:x="206" fg:w="18"/><text x="0.9752%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.02%)</title><rect x="0.7674%" y="245" width="0.0211%" height="15" fill="rgb(209,103,24)" fg:x="218" fg:w="6"/><text x="1.0174%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="0.8237%" y="181" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="234" fg:w="3"/><text x="1.0737%" y="191.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (59 samples, 0.21%)</title><rect x="0.6372%" y="277" width="0.2077%" height="15" fill="rgb(213,181,19)" fg:x="181" fg:w="59"/><text x="0.8872%" y="287.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.06%)</title><rect x="0.7885%" y="261" width="0.0563%" height="15" fill="rgb(254,191,54)" fg:x="224" fg:w="16"/><text x="1.0385%" y="271.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (16 samples, 0.06%)</title><rect x="0.7885%" y="245" width="0.0563%" height="15" fill="rgb(241,83,37)" fg:x="224" fg:w="16"/><text x="1.0385%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.06%)</title><rect x="0.7885%" y="229" width="0.0563%" height="15" fill="rgb(233,36,39)" fg:x="224" fg:w="16"/><text x="1.0385%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.05%)</title><rect x="0.7921%" y="213" width="0.0528%" height="15" fill="rgb(226,3,54)" fg:x="225" fg:w="15"/><text x="1.0421%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.05%)</title><rect x="0.7956%" y="197" width="0.0493%" height="15" fill="rgb(245,192,40)" fg:x="226" fg:w="14"/><text x="1.0456%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="0.8343%" y="181" width="0.0106%" height="15" fill="rgb(238,167,29)" fg:x="237" fg:w="3"/><text x="1.0843%" y="191.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (21 samples, 0.07%)</title><rect x="0.8449%" y="277" width="0.0739%" height="15" fill="rgb(232,182,51)" fg:x="240" fg:w="21"/><text x="1.0949%" y="287.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (49 samples, 0.17%)</title><rect x="0.9188%" y="277" width="0.1725%" height="15" fill="rgb(231,60,39)" fg:x="261" fg:w="49"/><text x="1.1688%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.05%)</title><rect x="1.3729%" y="245" width="0.0493%" height="15" fill="rgb(208,69,12)" fg:x="390" fg:w="14"/><text x="1.6229%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.05%)</title><rect x="1.3764%" y="229" width="0.0458%" height="15" fill="rgb(235,93,37)" fg:x="391" fg:w="13"/><text x="1.6264%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.04%)</title><rect x="1.3799%" y="213" width="0.0422%" height="15" fill="rgb(213,116,39)" fg:x="392" fg:w="12"/><text x="1.6299%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.05%)</title><rect x="1.4257%" y="245" width="0.0458%" height="15" fill="rgb(222,207,29)" fg:x="405" fg:w="13"/><text x="1.6757%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.03%)</title><rect x="1.4398%" y="229" width="0.0317%" height="15" fill="rgb(206,96,30)" fg:x="409" fg:w="9"/><text x="1.6898%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.03%)</title><rect x="1.4398%" y="213" width="0.0317%" height="15" fill="rgb(218,138,4)" fg:x="409" fg:w="9"/><text x="1.6898%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="1.5560%" y="213" width="0.0106%" height="15" fill="rgb(250,191,14)" fg:x="442" fg:w="3"/><text x="1.8060%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.10%)</title><rect x="1.4715%" y="245" width="0.0986%" height="15" fill="rgb(239,60,40)" fg:x="418" fg:w="28"/><text x="1.7215%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.04%)</title><rect x="1.5348%" y="229" width="0.0352%" height="15" fill="rgb(206,27,48)" fg:x="436" fg:w="10"/><text x="1.7848%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="1.5736%" y="245" width="0.0106%" height="15" fill="rgb(225,35,8)" fg:x="447" fg:w="3"/><text x="1.8236%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.06%)</title><rect x="1.6088%" y="197" width="0.0563%" height="15" fill="rgb(250,213,24)" fg:x="457" fg:w="16"/><text x="1.8588%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.05%)</title><rect x="1.6158%" y="181" width="0.0493%" height="15" fill="rgb(247,123,22)" fg:x="459" fg:w="14"/><text x="1.8658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="1.6440%" y="165" width="0.0211%" height="15" fill="rgb(231,138,38)" fg:x="467" fg:w="6"/><text x="1.8940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.07%)</title><rect x="1.5947%" y="213" width="0.0739%" height="15" fill="rgb(231,145,46)" fg:x="453" fg:w="21"/><text x="1.8447%" y="223.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (107 samples, 0.38%)</title><rect x="1.2955%" y="261" width="0.3767%" height="15" fill="rgb(251,118,11)" fg:x="368" fg:w="107"/><text x="1.5455%" y="271.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.09%)</title><rect x="1.5841%" y="245" width="0.0880%" height="15" fill="rgb(217,147,25)" fg:x="450" fg:w="25"/><text x="1.8341%" y="255.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (23 samples, 0.08%)</title><rect x="1.5912%" y="229" width="0.0810%" height="15" fill="rgb(247,81,37)" fg:x="452" fg:w="23"/><text x="1.8412%" y="239.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (54 samples, 0.19%)</title><rect x="1.6721%" y="261" width="0.1901%" height="15" fill="rgb(209,12,38)" fg:x="475" fg:w="54"/><text x="1.9221%" y="271.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (103 samples, 0.36%)</title><rect x="1.8622%" y="261" width="0.3626%" height="15" fill="rgb(227,1,9)" fg:x="529" fg:w="103"/><text x="2.1122%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.01%)</title><rect x="2.5487%" y="245" width="0.0106%" height="15" fill="rgb(248,47,43)" fg:x="724" fg:w="3"/><text x="2.7987%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.09%)</title><rect x="2.7282%" y="229" width="0.0880%" height="15" fill="rgb(221,10,30)" fg:x="775" fg:w="25"/><text x="2.9782%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.08%)</title><rect x="2.7352%" y="213" width="0.0810%" height="15" fill="rgb(210,229,1)" fg:x="777" fg:w="23"/><text x="2.9852%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.08%)</title><rect x="2.7352%" y="197" width="0.0810%" height="15" fill="rgb(222,148,37)" fg:x="777" fg:w="23"/><text x="2.9852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.06%)</title><rect x="2.8197%" y="229" width="0.0598%" height="15" fill="rgb(234,67,33)" fg:x="801" fg:w="17"/><text x="3.0697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.05%)</title><rect x="2.8338%" y="213" width="0.0458%" height="15" fill="rgb(247,98,35)" fg:x="805" fg:w="13"/><text x="3.0838%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.04%)</title><rect x="2.8408%" y="197" width="0.0387%" height="15" fill="rgb(247,138,52)" fg:x="807" fg:w="11"/><text x="3.0908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.12%)</title><rect x="2.8796%" y="229" width="0.1232%" height="15" fill="rgb(213,79,30)" fg:x="818" fg:w="35"/><text x="3.1296%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.06%)</title><rect x="2.9429%" y="213" width="0.0598%" height="15" fill="rgb(246,177,23)" fg:x="836" fg:w="17"/><text x="3.1929%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="3.0028%" y="229" width="0.0141%" height="15" fill="rgb(230,62,27)" fg:x="853" fg:w="4"/><text x="3.2528%" y="239.50"></text></g><g><title>reversi-rs`__rdl_alloc (3 samples, 0.01%)</title><rect x="3.0345%" y="213" width="0.0106%" height="15" fill="rgb(216,154,8)" fg:x="862" fg:w="3"/><text x="3.2845%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.13%)</title><rect x="3.0697%" y="181" width="0.1302%" height="15" fill="rgb(244,35,45)" fg:x="872" fg:w="37"/><text x="3.3197%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.12%)</title><rect x="3.0802%" y="165" width="0.1197%" height="15" fill="rgb(251,115,12)" fg:x="875" fg:w="34"/><text x="3.3302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.04%)</title><rect x="3.1612%" y="149" width="0.0387%" height="15" fill="rgb(240,54,50)" fg:x="898" fg:w="11"/><text x="3.4112%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.15%)</title><rect x="3.0556%" y="197" width="0.1479%" height="15" fill="rgb(233,84,52)" fg:x="868" fg:w="42"/><text x="3.3056%" y="207.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (181 samples, 0.64%)</title><rect x="2.5698%" y="245" width="0.6372%" height="15" fill="rgb(207,117,47)" fg:x="730" fg:w="181"/><text x="2.8198%" y="255.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (54 samples, 0.19%)</title><rect x="3.0169%" y="229" width="0.1901%" height="15" fill="rgb(249,43,39)" fg:x="857" fg:w="54"/><text x="3.2669%" y="239.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (46 samples, 0.16%)</title><rect x="3.0450%" y="213" width="0.1619%" height="15" fill="rgb(209,38,44)" fg:x="865" fg:w="46"/><text x="3.2950%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (95 samples, 0.33%)</title><rect x="3.2070%" y="245" width="0.3344%" height="15" fill="rgb(236,212,23)" fg:x="911" fg:w="95"/><text x="3.4570%" y="255.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (183 samples, 0.64%)</title><rect x="3.5414%" y="245" width="0.6442%" height="15" fill="rgb(242,79,21)" fg:x="1006" fg:w="183"/><text x="3.7914%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.01%)</title><rect x="4.8087%" y="229" width="0.0106%" height="15" fill="rgb(211,96,35)" fg:x="1366" fg:w="3"/><text x="5.0587%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.16%)</title><rect x="5.1748%" y="213" width="0.1584%" height="15" fill="rgb(253,215,40)" fg:x="1470" fg:w="45"/><text x="5.4248%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.14%)</title><rect x="5.1959%" y="197" width="0.1373%" height="15" fill="rgb(211,81,21)" fg:x="1476" fg:w="39"/><text x="5.4459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.12%)</title><rect x="5.2100%" y="181" width="0.1232%" height="15" fill="rgb(208,190,38)" fg:x="1480" fg:w="35"/><text x="5.4600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.07%)</title><rect x="5.3684%" y="197" width="0.0739%" height="15" fill="rgb(235,213,38)" fg:x="1525" fg:w="21"/><text x="5.6184%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.06%)</title><rect x="5.3790%" y="181" width="0.0634%" height="15" fill="rgb(237,122,38)" fg:x="1528" fg:w="18"/><text x="5.6290%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.11%)</title><rect x="5.3332%" y="213" width="0.1126%" height="15" fill="rgb(244,218,35)" fg:x="1515" fg:w="32"/><text x="5.5832%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.02%)</title><rect x="5.6747%" y="181" width="0.0246%" height="15" fill="rgb(240,68,47)" fg:x="1612" fg:w="7"/><text x="5.9247%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (77 samples, 0.27%)</title><rect x="5.4458%" y="213" width="0.2711%" height="15" fill="rgb(210,16,53)" fg:x="1547" fg:w="77"/><text x="5.6958%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (36 samples, 0.13%)</title><rect x="5.5902%" y="197" width="0.1267%" height="15" fill="rgb(235,124,12)" fg:x="1588" fg:w="36"/><text x="5.8402%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.02%)</title><rect x="5.6993%" y="181" width="0.0176%" height="15" fill="rgb(224,169,11)" fg:x="1619" fg:w="5"/><text x="5.9493%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="5.7239%" y="213" width="0.0176%" height="15" fill="rgb(250,166,2)" fg:x="1626" fg:w="5"/><text x="5.9739%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.03%)</title><rect x="5.9492%" y="133" width="0.0317%" height="15" fill="rgb(242,216,29)" fg:x="1690" fg:w="9"/><text x="6.1992%" y="143.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (337 samples, 1.19%)</title><rect x="4.8544%" y="229" width="1.1863%" height="15" fill="rgb(230,116,27)" fg:x="1379" fg:w="337"/><text x="5.1044%" y="239.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (85 samples, 0.30%)</title><rect x="5.7415%" y="213" width="0.2992%" height="15" fill="rgb(228,99,48)" fg:x="1631" fg:w="85"/><text x="5.9915%" y="223.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (77 samples, 0.27%)</title><rect x="5.7697%" y="197" width="0.2711%" height="15" fill="rgb(253,11,6)" fg:x="1639" fg:w="77"/><text x="6.0197%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (75 samples, 0.26%)</title><rect x="5.7767%" y="181" width="0.2640%" height="15" fill="rgb(247,143,39)" fg:x="1641" fg:w="75"/><text x="6.0267%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.24%)</title><rect x="5.8049%" y="165" width="0.2359%" height="15" fill="rgb(236,97,10)" fg:x="1649" fg:w="67"/><text x="6.0549%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (62 samples, 0.22%)</title><rect x="5.8225%" y="149" width="0.2183%" height="15" fill="rgb(233,208,19)" fg:x="1654" fg:w="62"/><text x="6.0725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.06%)</title><rect x="5.9809%" y="133" width="0.0598%" height="15" fill="rgb(216,164,2)" fg:x="1699" fg:w="17"/><text x="6.2309%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="6.0302%" y="117" width="0.0106%" height="15" fill="rgb(220,129,5)" fg:x="1713" fg:w="3"/><text x="6.2802%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (172 samples, 0.61%)</title><rect x="6.0408%" y="229" width="0.6055%" height="15" fill="rgb(242,17,10)" fg:x="1716" fg:w="172"/><text x="6.2908%" y="239.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (264 samples, 0.93%)</title><rect x="6.6462%" y="229" width="0.9293%" height="15" fill="rgb(242,107,0)" fg:x="1888" fg:w="264"/><text x="6.8962%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.01%)</title><rect x="8.6282%" y="213" width="0.0106%" height="15" fill="rgb(251,28,31)" fg:x="2451" fg:w="3"/><text x="8.8782%" y="223.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="8.6669%" y="213" width="0.0106%" height="15" fill="rgb(233,223,10)" fg:x="2462" fg:w="3"/><text x="8.9169%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (78 samples, 0.27%)</title><rect x="9.1316%" y="197" width="0.2746%" height="15" fill="rgb(215,21,27)" fg:x="2594" fg:w="78"/><text x="9.3816%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.24%)</title><rect x="9.1668%" y="181" width="0.2394%" height="15" fill="rgb(232,23,21)" fg:x="2604" fg:w="68"/><text x="9.4168%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.23%)</title><rect x="9.1773%" y="165" width="0.2288%" height="15" fill="rgb(244,5,23)" fg:x="2607" fg:w="65"/><text x="9.4273%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.12%)</title><rect x="9.5012%" y="181" width="0.1197%" height="15" fill="rgb(226,81,46)" fg:x="2699" fg:w="34"/><text x="9.7512%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.11%)</title><rect x="9.5117%" y="165" width="0.1091%" height="15" fill="rgb(247,70,30)" fg:x="2702" fg:w="31"/><text x="9.7617%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.22%)</title><rect x="9.4061%" y="197" width="0.2183%" height="15" fill="rgb(212,68,19)" fg:x="2672" fg:w="62"/><text x="9.6561%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.02%)</title><rect x="10.0292%" y="165" width="0.0246%" height="15" fill="rgb(240,187,13)" fg:x="2849" fg:w="7"/><text x="10.2792%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (128 samples, 0.45%)</title><rect x="9.6244%" y="197" width="0.4506%" height="15" fill="rgb(223,113,26)" fg:x="2734" fg:w="128"/><text x="9.8744%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (62 samples, 0.22%)</title><rect x="9.8567%" y="181" width="0.2183%" height="15" fill="rgb(206,192,2)" fg:x="2800" fg:w="62"/><text x="10.1067%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="10.0539%" y="165" width="0.0211%" height="15" fill="rgb(241,108,4)" fg:x="2856" fg:w="6"/><text x="10.3039%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.05%)</title><rect x="10.0785%" y="197" width="0.0493%" height="15" fill="rgb(247,173,49)" fg:x="2863" fg:w="14"/><text x="10.3285%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.04%)</title><rect x="10.4340%" y="117" width="0.0387%" height="15" fill="rgb(224,114,35)" fg:x="2964" fg:w="11"/><text x="10.6840%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (110 samples, 0.39%)</title><rect x="10.1841%" y="165" width="0.3872%" height="15" fill="rgb(245,159,27)" fg:x="2893" fg:w="110"/><text x="10.4341%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (102 samples, 0.36%)</title><rect x="10.2123%" y="149" width="0.3591%" height="15" fill="rgb(245,172,44)" fg:x="2901" fg:w="102"/><text x="10.4623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (98 samples, 0.34%)</title><rect x="10.2264%" y="133" width="0.3450%" height="15" fill="rgb(236,23,11)" fg:x="2905" fg:w="98"/><text x="10.4764%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.10%)</title><rect x="10.4728%" y="117" width="0.0986%" height="15" fill="rgb(205,117,38)" fg:x="2975" fg:w="28"/><text x="10.7228%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.03%)</title><rect x="10.5432%" y="101" width="0.0282%" height="15" fill="rgb(237,72,25)" fg:x="2995" fg:w="8"/><text x="10.7932%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="10.5713%" y="165" width="0.0106%" height="15" fill="rgb(244,70,9)" fg:x="3003" fg:w="3"/><text x="10.8213%" y="175.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (542 samples, 1.91%)</title><rect x="8.6774%" y="213" width="1.9080%" height="15" fill="rgb(217,125,39)" fg:x="2465" fg:w="542"/><text x="8.9274%" y="223.50">r..</text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (130 samples, 0.46%)</title><rect x="10.1278%" y="197" width="0.4576%" height="15" fill="rgb(235,36,10)" fg:x="2877" fg:w="130"/><text x="10.3778%" y="207.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (121 samples, 0.43%)</title><rect x="10.1595%" y="181" width="0.4260%" height="15" fill="rgb(251,123,47)" fg:x="2886" fg:w="121"/><text x="10.4095%" y="191.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (275 samples, 0.97%)</title><rect x="10.5854%" y="213" width="0.9681%" height="15" fill="rgb(221,13,13)" fg:x="3007" fg:w="275"/><text x="10.8354%" y="223.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (473 samples, 1.67%)</title><rect x="11.5535%" y="213" width="1.6651%" height="15" fill="rgb(238,131,9)" fg:x="3282" fg:w="473"/><text x="11.8035%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="15.1230%" y="197" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="4296" fg:w="3"/><text x="15.3730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.02%)</title><rect x="15.1336%" y="197" width="0.0211%" height="15" fill="rgb(245,182,24)" fg:x="4299" fg:w="6"/><text x="15.3836%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (15 samples, 0.05%)</title><rect x="15.1547%" y="197" width="0.0528%" height="15" fill="rgb(242,14,37)" fg:x="4305" fg:w="15"/><text x="15.4047%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="15.2075%" y="197" width="0.0176%" height="15" fill="rgb(246,228,12)" fg:x="4320" fg:w="5"/><text x="15.4575%" y="207.50"></text></g><g><title>reversi-rs`__rdl_alloc (3 samples, 0.01%)</title><rect x="15.2286%" y="197" width="0.0106%" height="15" fill="rgb(213,55,15)" fg:x="4326" fg:w="3"/><text x="15.4786%" y="207.50"></text></g><g><title>reversi-rs`__rdl_dealloc (4 samples, 0.01%)</title><rect x="15.2392%" y="197" width="0.0141%" height="15" fill="rgb(209,9,3)" fg:x="4329" fg:w="4"/><text x="15.4892%" y="207.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="15.2568%" y="197" width="0.0141%" height="15" fill="rgb(230,59,30)" fg:x="4334" fg:w="4"/><text x="15.5068%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (183 samples, 0.64%)</title><rect x="16.0137%" y="181" width="0.6442%" height="15" fill="rgb(209,121,21)" fg:x="4549" fg:w="183"/><text x="16.2637%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (154 samples, 0.54%)</title><rect x="16.1157%" y="165" width="0.5421%" height="15" fill="rgb(220,109,13)" fg:x="4578" fg:w="154"/><text x="16.3657%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (142 samples, 0.50%)</title><rect x="16.1580%" y="149" width="0.4999%" height="15" fill="rgb(232,18,1)" fg:x="4590" fg:w="142"/><text x="16.4080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.02%)</title><rect x="16.6579%" y="181" width="0.0211%" height="15" fill="rgb(215,41,42)" fg:x="4732" fg:w="6"/><text x="16.9079%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (61 samples, 0.21%)</title><rect x="16.8515%" y="165" width="0.2147%" height="15" fill="rgb(224,123,36)" fg:x="4787" fg:w="61"/><text x="17.1015%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (51 samples, 0.18%)</title><rect x="16.8867%" y="149" width="0.1795%" height="15" fill="rgb(240,125,3)" fg:x="4797" fg:w="51"/><text x="17.1367%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (113 samples, 0.40%)</title><rect x="16.6790%" y="181" width="0.3978%" height="15" fill="rgb(205,98,50)" fg:x="4738" fg:w="113"/><text x="16.9290%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="17.0662%" y="165" width="0.0106%" height="15" fill="rgb(205,185,37)" fg:x="4848" fg:w="3"/><text x="17.3162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.09%)</title><rect x="17.9604%" y="149" width="0.0880%" height="15" fill="rgb(238,207,15)" fg:x="5102" fg:w="25"/><text x="18.2104%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (286 samples, 1.01%)</title><rect x="17.0768%" y="181" width="1.0068%" height="15" fill="rgb(213,199,42)" fg:x="4851" fg:w="286"/><text x="17.3268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (129 samples, 0.45%)</title><rect x="17.6295%" y="165" width="0.4541%" height="15" fill="rgb(235,201,11)" fg:x="5008" fg:w="129"/><text x="17.8795%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.04%)</title><rect x="18.0484%" y="149" width="0.0352%" height="15" fill="rgb(207,46,11)" fg:x="5127" fg:w="10"/><text x="18.2984%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="18.0906%" y="181" width="0.0106%" height="15" fill="rgb(241,35,35)" fg:x="5139" fg:w="3"/><text x="18.3406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="18.1012%" y="181" width="0.0141%" height="15" fill="rgb(243,32,47)" fg:x="5142" fg:w="4"/><text x="18.3512%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.06%)</title><rect x="18.1153%" y="181" width="0.0634%" height="15" fill="rgb(247,202,23)" fg:x="5146" fg:w="18"/><text x="18.3653%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.02%)</title><rect x="18.2349%" y="165" width="0.0246%" height="15" fill="rgb(219,102,11)" fg:x="5180" fg:w="7"/><text x="18.4849%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.05%)</title><rect x="18.8510%" y="101" width="0.0528%" height="15" fill="rgb(243,110,44)" fg:x="5355" fg:w="15"/><text x="19.1010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (221 samples, 0.78%)</title><rect x="18.3617%" y="133" width="0.7780%" height="15" fill="rgb(222,74,54)" fg:x="5216" fg:w="221"/><text x="18.6117%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (207 samples, 0.73%)</title><rect x="18.4110%" y="117" width="0.7287%" height="15" fill="rgb(216,99,12)" fg:x="5230" fg:w="207"/><text x="18.6610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (67 samples, 0.24%)</title><rect x="18.9038%" y="101" width="0.2359%" height="15" fill="rgb(226,22,26)" fg:x="5370" fg:w="67"/><text x="19.1538%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.05%)</title><rect x="19.0939%" y="85" width="0.0458%" height="15" fill="rgb(217,163,10)" fg:x="5424" fg:w="13"/><text x="19.3439%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (239 samples, 0.84%)</title><rect x="18.3018%" y="149" width="0.8413%" height="15" fill="rgb(213,25,53)" fg:x="5199" fg:w="239"/><text x="18.5518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="19.1432%" y="149" width="0.0106%" height="15" fill="rgb(252,105,26)" fg:x="5438" fg:w="3"/><text x="19.3932%" y="159.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (280 samples, 0.99%)</title><rect x="18.1786%" y="181" width="0.9857%" height="15" fill="rgb(220,39,43)" fg:x="5164" fg:w="280"/><text x="18.4286%" y="191.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (255 samples, 0.90%)</title><rect x="18.2666%" y="165" width="0.8977%" height="15" fill="rgb(229,68,48)" fg:x="5189" fg:w="255"/><text x="18.5166%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="19.1537%" y="149" width="0.0106%" height="15" fill="rgb(252,8,32)" fg:x="5441" fg:w="3"/><text x="19.4037%" y="159.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (1,107 samples, 3.90%)</title><rect x="15.2709%" y="197" width="3.8969%" height="15" fill="rgb(223,20,43)" fg:x="4338" fg:w="1107"/><text x="15.5209%" y="207.50">reve..</text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (557 samples, 1.96%)</title><rect x="19.1678%" y="197" width="1.9608%" height="15" fill="rgb(229,81,49)" fg:x="5445" fg:w="557"/><text x="19.4178%" y="207.50">r..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (875 samples, 3.08%)</title><rect x="21.1286%" y="197" width="3.0802%" height="15" fill="rgb(236,28,36)" fg:x="6002" fg:w="875"/><text x="21.3786%" y="207.50">rev..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="26.9194%" y="181" width="0.0141%" height="15" fill="rgb(249,185,26)" fg:x="7647" fg:w="4"/><text x="27.1694%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.03%)</title><rect x="26.9335%" y="181" width="0.0282%" height="15" fill="rgb(249,174,33)" fg:x="7651" fg:w="8"/><text x="27.1835%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.02%)</title><rect x="26.9617%" y="181" width="0.0246%" height="15" fill="rgb(233,201,37)" fg:x="7659" fg:w="7"/><text x="27.2117%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.02%)</title><rect x="26.9863%" y="181" width="0.0176%" height="15" fill="rgb(221,78,26)" fg:x="7666" fg:w="5"/><text x="27.2363%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.02%)</title><rect x="27.0039%" y="181" width="0.0211%" height="15" fill="rgb(250,127,30)" fg:x="7671" fg:w="6"/><text x="27.2539%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (21 samples, 0.07%)</title><rect x="27.0250%" y="181" width="0.0739%" height="15" fill="rgb(230,49,44)" fg:x="7677" fg:w="21"/><text x="27.2750%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.03%)</title><rect x="27.0990%" y="181" width="0.0317%" height="15" fill="rgb(229,67,23)" fg:x="7698" fg:w="9"/><text x="27.3490%" y="191.50"></text></g><g><title>reversi-rs`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="27.1342%" y="181" width="0.0141%" height="15" fill="rgb(249,83,47)" fg:x="7708" fg:w="4"/><text x="27.3842%" y="191.50"></text></g><g><title>reversi-rs`__rdl_dealloc (4 samples, 0.01%)</title><rect x="27.1588%" y="181" width="0.0141%" height="15" fill="rgb(215,43,3)" fg:x="7715" fg:w="4"/><text x="27.4088%" y="191.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="27.1799%" y="181" width="0.0176%" height="15" fill="rgb(238,154,13)" fg:x="7721" fg:w="5"/><text x="27.4299%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (178 samples, 0.63%)</title><rect x="28.3275%" y="149" width="0.6266%" height="15" fill="rgb(219,56,2)" fg:x="8047" fg:w="178"/><text x="28.5775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (168 samples, 0.59%)</title><rect x="28.3627%" y="133" width="0.5914%" height="15" fill="rgb(233,0,4)" fg:x="8057" fg:w="168"/><text x="28.6127%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (209 samples, 0.74%)</title><rect x="28.2325%" y="165" width="0.7357%" height="15" fill="rgb(235,30,7)" fg:x="8020" fg:w="209"/><text x="28.4825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.01%)</title><rect x="28.9541%" y="149" width="0.0141%" height="15" fill="rgb(250,79,13)" fg:x="8225" fg:w="4"/><text x="29.2041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.01%)</title><rect x="28.9682%" y="165" width="0.0141%" height="15" fill="rgb(211,146,34)" fg:x="8229" fg:w="4"/><text x="29.2182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (85 samples, 0.30%)</title><rect x="29.2358%" y="149" width="0.2992%" height="15" fill="rgb(228,22,38)" fg:x="8305" fg:w="85"/><text x="29.4858%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (74 samples, 0.26%)</title><rect x="29.2745%" y="133" width="0.2605%" height="15" fill="rgb(235,168,5)" fg:x="8316" fg:w="74"/><text x="29.5245%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (164 samples, 0.58%)</title><rect x="28.9823%" y="165" width="0.5773%" height="15" fill="rgb(221,155,16)" fg:x="8233" fg:w="164"/><text x="29.2323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.02%)</title><rect x="29.5350%" y="149" width="0.0246%" height="15" fill="rgb(215,215,53)" fg:x="8390" fg:w="7"/><text x="29.7850%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.08%)</title><rect x="30.5981%" y="133" width="0.0774%" height="15" fill="rgb(223,4,10)" fg:x="8692" fg:w="22"/><text x="30.8481%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (339 samples, 1.19%)</title><rect x="29.5596%" y="165" width="1.1934%" height="15" fill="rgb(234,103,6)" fg:x="8397" fg:w="339"/><text x="29.8096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (141 samples, 0.50%)</title><rect x="30.2566%" y="149" width="0.4964%" height="15" fill="rgb(227,97,0)" fg:x="8595" fg:w="141"/><text x="30.5066%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (22 samples, 0.08%)</title><rect x="30.6755%" y="133" width="0.0774%" height="15" fill="rgb(234,150,53)" fg:x="8714" fg:w="22"/><text x="30.9255%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="30.7565%" y="165" width="0.0141%" height="15" fill="rgb(228,201,54)" fg:x="8737" fg:w="4"/><text x="31.0065%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.01%)</title><rect x="30.7706%" y="165" width="0.0141%" height="15" fill="rgb(222,22,37)" fg:x="8741" fg:w="4"/><text x="31.0206%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.07%)</title><rect x="30.7917%" y="165" width="0.0739%" height="15" fill="rgb(237,53,32)" fg:x="8747" fg:w="21"/><text x="31.0417%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.01%)</title><rect x="30.9642%" y="149" width="0.0141%" height="15" fill="rgb(233,25,53)" fg:x="8796" fg:w="4"/><text x="31.2142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.11%)</title><rect x="31.8267%" y="85" width="0.1126%" height="15" fill="rgb(210,40,34)" fg:x="9041" fg:w="32"/><text x="32.0767%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (314 samples, 1.11%)</title><rect x="31.1437%" y="117" width="1.1054%" height="15" fill="rgb(241,220,44)" fg:x="8847" fg:w="314"/><text x="31.3937%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (303 samples, 1.07%)</title><rect x="31.1825%" y="101" width="1.0666%" height="15" fill="rgb(235,28,35)" fg:x="8858" fg:w="303"/><text x="31.4325%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (88 samples, 0.31%)</title><rect x="31.9393%" y="85" width="0.3098%" height="15" fill="rgb(210,56,17)" fg:x="9073" fg:w="88"/><text x="32.1893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.06%)</title><rect x="32.1857%" y="69" width="0.0634%" height="15" fill="rgb(224,130,29)" fg:x="9143" fg:w="18"/><text x="32.4357%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (346 samples, 1.22%)</title><rect x="31.0346%" y="133" width="1.2180%" height="15" fill="rgb(235,212,8)" fg:x="8816" fg:w="346"/><text x="31.2846%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.03%)</title><rect x="32.2526%" y="133" width="0.0282%" height="15" fill="rgb(223,33,50)" fg:x="9162" fg:w="8"/><text x="32.5026%" y="143.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (409 samples, 1.44%)</title><rect x="30.8656%" y="165" width="1.4398%" height="15" fill="rgb(219,149,13)" fg:x="8768" fg:w="409"/><text x="31.1156%" y="175.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (375 samples, 1.32%)</title><rect x="30.9853%" y="149" width="1.3201%" height="15" fill="rgb(250,156,29)" fg:x="8802" fg:w="375"/><text x="31.2353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="32.2843%" y="133" width="0.0211%" height="15" fill="rgb(216,193,19)" fg:x="9171" fg:w="6"/><text x="32.5343%" y="143.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (1,454 samples, 5.12%)</title><rect x="27.1975%" y="181" width="5.1185%" height="15" fill="rgb(216,135,14)" fg:x="7726" fg:w="1454"/><text x="27.4475%" y="191.50">revers..</text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="32.3054%" y="165" width="0.0106%" height="15" fill="rgb(241,47,5)" fg:x="9177" fg:w="3"/><text x="32.5554%" y="175.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (621 samples, 2.19%)</title><rect x="32.3160%" y="181" width="2.1861%" height="15" fill="rgb(233,42,35)" fg:x="9180" fg:w="621"/><text x="32.5660%" y="191.50">r..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,193 samples, 4.20%)</title><rect x="34.5021%" y="181" width="4.1997%" height="15" fill="rgb(231,13,6)" fg:x="9801" fg:w="1193"/><text x="34.7521%" y="191.50">rever..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="40.1380%" y="149" width="0.0211%" height="15" fill="rgb(207,181,40)" fg:x="11402" fg:w="6"/><text x="40.3880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="40.1415%" y="133" width="0.0176%" height="15" fill="rgb(254,173,49)" fg:x="11403" fg:w="5"/><text x="40.3915%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="40.1415%" y="117" width="0.0176%" height="15" fill="rgb(221,1,38)" fg:x="11403" fg:w="5"/><text x="40.3915%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="40.1626%" y="149" width="0.0141%" height="15" fill="rgb(206,124,46)" fg:x="11409" fg:w="4"/><text x="40.4126%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="40.1662%" y="133" width="0.0106%" height="15" fill="rgb(249,21,11)" fg:x="11410" fg:w="3"/><text x="40.4162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="40.1662%" y="117" width="0.0106%" height="15" fill="rgb(222,201,40)" fg:x="11410" fg:w="3"/><text x="40.4162%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.03%)</title><rect x="40.1767%" y="149" width="0.0317%" height="15" fill="rgb(235,61,29)" fg:x="11413" fg:w="9"/><text x="40.4267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="40.1908%" y="133" width="0.0176%" height="15" fill="rgb(219,207,3)" fg:x="11417" fg:w="5"/><text x="40.4408%" y="143.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (36 samples, 0.13%)</title><rect x="40.1134%" y="165" width="0.1267%" height="15" fill="rgb(222,56,46)" fg:x="11395" fg:w="36"/><text x="40.3634%" y="175.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.03%)</title><rect x="40.2084%" y="149" width="0.0317%" height="15" fill="rgb(239,76,54)" fg:x="11422" fg:w="9"/><text x="40.4584%" y="159.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="40.2119%" y="133" width="0.0282%" height="15" fill="rgb(231,124,27)" fg:x="11423" fg:w="8"/><text x="40.4619%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="40.2154%" y="117" width="0.0246%" height="15" fill="rgb(249,195,6)" fg:x="11424" fg:w="7"/><text x="40.4654%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="40.2190%" y="101" width="0.0211%" height="15" fill="rgb(237,174,47)" fg:x="11425" fg:w="6"/><text x="40.4690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="40.2225%" y="85" width="0.0176%" height="15" fill="rgb(206,201,31)" fg:x="11426" fg:w="5"/><text x="40.4725%" y="95.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (362 samples, 1.27%)</title><rect x="40.2401%" y="165" width="1.2743%" height="15" fill="rgb(231,57,52)" fg:x="11431" fg:w="362"/><text x="40.4901%" y="175.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (732 samples, 2.58%)</title><rect x="41.5144%" y="165" width="2.5768%" height="15" fill="rgb(248,177,22)" fg:x="11793" fg:w="732"/><text x="41.7644%" y="175.50">re..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="46.0872%" y="133" width="0.0106%" height="15" fill="rgb(215,211,37)" fg:x="13092" fg:w="3"/><text x="46.3372%" y="143.50"></text></g><g><title>reversi-rs`alloc::slice::merge_sort (8 samples, 0.03%)</title><rect x="46.0802%" y="149" width="0.0282%" height="15" fill="rgb(241,128,51)" fg:x="13090" fg:w="8"/><text x="46.3302%" y="159.50"></text></g><g><title>reversi-rs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="46.0978%" y="133" width="0.0106%" height="15" fill="rgb(227,165,31)" fg:x="13095" fg:w="3"/><text x="46.3478%" y="143.50"></text></g><g><title>reversi-rs`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="46.0978%" y="117" width="0.0106%" height="15" fill="rgb(228,167,24)" fg:x="13095" fg:w="3"/><text x="46.3478%" y="127.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (501 samples, 1.76%)</title><rect x="46.1084%" y="149" width="1.7636%" height="15" fill="rgb(228,143,12)" fg:x="13098" fg:w="501"/><text x="46.3584%" y="159.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,309 samples, 4.61%)</title><rect x="47.8720%" y="149" width="4.6080%" height="15" fill="rgb(249,149,8)" fg:x="13599" fg:w="1309"/><text x="48.1220%" y="159.50">rever..</text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (777 samples, 2.74%)</title><rect x="55.3068%" y="133" width="2.7352%" height="15" fill="rgb(243,35,44)" fg:x="15711" fg:w="777"/><text x="55.5568%" y="143.50">re..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,537 samples, 5.41%)</title><rect x="58.0420%" y="133" width="5.4106%" height="15" fill="rgb(246,89,9)" fg:x="16488" fg:w="1537"/><text x="58.2920%" y="143.50">reversi..</text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (1,116 samples, 3.93%)</title><rect x="67.1525%" y="117" width="3.9286%" height="15" fill="rgb(233,213,13)" fg:x="19076" fg:w="1116"/><text x="67.4025%" y="127.50">reve..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,903 samples, 6.70%)</title><rect x="71.0811%" y="117" width="6.6991%" height="15" fill="rgb(233,141,41)" fg:x="20192" fg:w="1903"/><text x="71.3311%" y="127.50">reversi-r..</text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (1,370 samples, 4.82%)</title><rect x="81.7686%" y="101" width="4.8228%" height="15" fill="rgb(239,167,4)" fg:x="23228" fg:w="1370"/><text x="82.0186%" y="111.50">revers..</text></g><g><title>reversi-rs`reversi_rs::mobility::put (1,336 samples, 4.70%)</title><rect x="86.5913%" y="101" width="4.7031%" height="15" fill="rgb(209,217,16)" fg:x="24598" fg:w="1336"/><text x="86.8413%" y="111.50">rever..</text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (394 samples, 1.39%)</title><rect x="94.7372%" y="85" width="1.3870%" height="15" fill="rgb(219,88,35)" fg:x="26912" fg:w="394"/><text x="94.9872%" y="95.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (499 samples, 1.76%)</title><rect x="96.1242%" y="85" width="1.7566%" height="15" fill="rgb(220,193,23)" fg:x="27306" fg:w="499"/><text x="96.3742%" y="95.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (72 samples, 0.25%)</title><rect x="99.1305%" y="69" width="0.2535%" height="15" fill="rgb(230,90,52)" fg:x="28160" fg:w="72"/><text x="99.3805%" y="79.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (79 samples, 0.28%)</title><rect x="99.3840%" y="69" width="0.2781%" height="15" fill="rgb(252,106,19)" fg:x="28232" fg:w="79"/><text x="99.6340%" y="79.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::get_mobility (7 samples, 0.02%)</title><rect x="99.8557%" y="53" width="0.0246%" height="15" fill="rgb(206,74,20)" fg:x="28366" fg:w="7"/><text x="100.1057%" y="63.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (17 samples, 0.06%)</title><rect x="99.8803%" y="53" width="0.0598%" height="15" fill="rgb(230,138,44)" fg:x="28373" fg:w="17"/><text x="100.1303%" y="63.50"></text></g><g><title>reversi-rs`reversi_rs::mobility::put (3 samples, 0.01%)</title><rect x="99.9789%" y="37" width="0.0106%" height="15" fill="rgb(235,182,43)" fg:x="28401" fg:w="3"/><text x="100.2289%" y="47.50"></text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,405 samples, 99.99%)</title><rect x="0.0035%" y="421" width="99.9930%" height="15" fill="rgb(242,16,51)" fg:x="1" fg:w="28405"/><text x="0.2535%" y="431.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,405 samples, 99.99%)</title><rect x="0.0035%" y="405" width="99.9930%" height="15" fill="rgb(248,9,4)" fg:x="1" fg:w="28405"/><text x="0.2535%" y="415.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,405 samples, 99.99%)</title><rect x="0.0035%" y="389" width="99.9930%" height="15" fill="rgb(210,31,22)" fg:x="1" fg:w="28405"/><text x="0.2535%" y="399.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,404 samples, 99.99%)</title><rect x="0.0070%" y="373" width="99.9894%" height="15" fill="rgb(239,54,39)" fg:x="2" fg:w="28404"/><text x="0.2570%" y="383.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,403 samples, 99.99%)</title><rect x="0.0106%" y="357" width="99.9859%" height="15" fill="rgb(230,99,41)" fg:x="3" fg:w="28403"/><text x="0.2606%" y="367.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,400 samples, 99.98%)</title><rect x="0.0211%" y="341" width="99.9754%" height="15" fill="rgb(253,106,12)" fg:x="6" fg:w="28400"/><text x="0.2711%" y="351.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,379 samples, 99.90%)</title><rect x="0.0950%" y="325" width="99.9014%" height="15" fill="rgb(213,46,41)" fg:x="27" fg:w="28379"/><text x="0.3450%" y="335.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,341 samples, 99.77%)</title><rect x="0.2288%" y="309" width="99.7677%" height="15" fill="rgb(215,133,35)" fg:x="65" fg:w="28341"/><text x="0.4788%" y="319.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,248 samples, 99.44%)</title><rect x="0.5562%" y="293" width="99.4403%" height="15" fill="rgb(213,28,5)" fg:x="158" fg:w="28248"/><text x="0.8062%" y="303.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (28,096 samples, 98.91%)</title><rect x="1.0913%" y="277" width="98.9052%" height="15" fill="rgb(215,77,49)" fg:x="310" fg:w="28096"/><text x="1.3413%" y="287.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (27,774 samples, 97.77%)</title><rect x="2.2248%" y="261" width="97.7717%" height="15" fill="rgb(248,100,22)" fg:x="632" fg:w="27774"/><text x="2.4748%" y="271.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (27,217 samples, 95.81%)</title><rect x="4.1856%" y="245" width="95.8109%" height="15" fill="rgb(208,67,9)" fg:x="1189" fg:w="27217"/><text x="4.4356%" y="255.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (26,254 samples, 92.42%)</title><rect x="7.5756%" y="229" width="92.4209%" height="15" fill="rgb(219,133,21)" fg:x="2152" fg:w="26254"/><text x="7.8256%" y="239.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (24,651 samples, 86.78%)</title><rect x="13.2186%" y="213" width="86.7779%" height="15" fill="rgb(246,46,29)" fg:x="3755" fg:w="24651"/><text x="13.4686%" y="223.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (21,529 samples, 75.79%)</title><rect x="24.2088%" y="197" width="75.7877%" height="15" fill="rgb(246,185,52)" fg:x="6877" fg:w="21529"/><text x="24.4588%" y="207.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (17,412 samples, 61.29%)</title><rect x="38.7017%" y="181" width="61.2948%" height="15" fill="rgb(252,136,11)" fg:x="10994" fg:w="17412"/><text x="38.9517%" y="191.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (15,881 samples, 55.91%)</title><rect x="44.0912%" y="165" width="55.9052%" height="15" fill="rgb(219,138,53)" fg:x="12525" fg:w="15881"/><text x="44.3412%" y="175.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (13,498 samples, 47.52%)</title><rect x="52.4800%" y="149" width="47.5165%" height="15" fill="rgb(211,51,23)" fg:x="14908" fg:w="13498"/><text x="52.7300%" y="159.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (10,381 samples, 36.54%)</title><rect x="63.4527%" y="133" width="36.5438%" height="15" fill="rgb(247,221,28)" fg:x="18025" fg:w="10381"/><text x="63.7027%" y="143.50">reversi-rs`reversi_rs::search::rec_search</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (6,311 samples, 22.22%)</title><rect x="77.7801%" y="117" width="22.2164%" height="15" fill="rgb(251,222,45)" fg:x="22095" fg:w="6311"/><text x="78.0301%" y="127.50">reversi-rs`reversi_rs::search::rec_..</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (2,472 samples, 8.70%)</title><rect x="91.2944%" y="101" width="8.7021%" height="15" fill="rgb(217,162,53)" fg:x="25934" fg:w="2472"/><text x="91.5444%" y="111.50">reversi-rs`r..</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (601 samples, 2.12%)</title><rect x="97.8808%" y="85" width="2.1157%" height="15" fill="rgb(229,93,14)" fg:x="27805" fg:w="601"/><text x="98.1308%" y="95.50">r..</text></g><g><title>reversi-rs`reversi_rs::search::rec_search (95 samples, 0.33%)</title><rect x="99.6621%" y="69" width="0.3344%" height="15" fill="rgb(209,67,49)" fg:x="28311" fg:w="95"/><text x="99.9121%" y="79.50"></text></g><g><title>reversi-rs`reversi_rs::search::rec_search (16 samples, 0.06%)</title><rect x="99.9402%" y="53" width="0.0563%" height="15" fill="rgb(213,87,29)" fg:x="28390" fg:w="16"/><text x="100.1902%" y="63.50"></text></g><g><title>all (28,407 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="559.50"></text></g><g><title>0x6 (28,407 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="543.50">0x6</text></g><g><title>reversi-rs`start (28,407 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="527.50">reversi-rs`start</text></g><g><title>reversi-rs`main (28,407 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="511.50">reversi-rs`main</text></g><g><title>reversi-rs`std::rt::lang_start_internal (28,407 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="495.50">reversi-rs`std::rt::lang_start_internal</text></g><g><title>reversi-rs`std::rt::lang_start::_{{closure}} (28,407 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="479.50">reversi-rs`std::rt::lang_start::_{{closure}}</text></g><g><title>reversi-rs`std::sys_common::backtrace::__rust_begin_short_backtrace (28,407 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="463.50">reversi-rs`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>reversi-rs`reversi_rs::main (28,407 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="28407"/><text x="0.2500%" y="447.50">reversi-rs`reversi_rs::main</text></g></svg></svg>